<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.xulei.mapper.UserMapper">
    <!--    resultType代表结果类型-->
    <!--    <select id="selectAllUser" resultType="mybatis.pojo.User">-->
    <!--    <select id="getAll" resultType="user">-->

    <sql id="allColumn">
        id,name,age,classes_id as classesId
    </sql>
    <resultMap id="userResultMap" type="com.xulei.pojo.User">
        <result column="classes_id" property="classesId"/>
    </resultMap>
    <select id="getAll" resultType="com.xulei.pojo.User">
        select * from user;
    </select>
    <!--    <select id="findById" resultType="user">-->
    <!--        &lt;!&ndash;1.通过起别名的方式来映射数据库字段,select *,classes_id as classesId from user where id=#{id};&ndash;&gt;-->
    <!--        &lt;!&ndash;2.通过sql片段来映射&ndash;&gt;-->
    <!--        &lt;!&ndash;3.resultMap来解决&ndash;&gt;-->
    <!--                select-->
    <!--                <include refid="allColumn"/>-->
    <!--                from user where id = #{id};-->
    <!--       -->
    <!--    </select>-->

    <select id="findById" parameterType="int" resultMap="userResultMap">
        <!--1. #{}, 会替换为?占位符 采用预编译的形式，防止sql注入-->
        <!--2. ${}, 没有进行占位符替换，会产生sql注入；表名，列名动态拼接的时候使用-->
        <!--3. parameterType可以不用写，是直接使用xml方式调用的时候使用-->
        <!--4. xml文件特殊字符-->
        <!--5. < &lt;-->
        <!--6. CD快捷键 <![CDATA[
            <
            ]]>-->

        select * from user where id=#{id};

    </select>
    <select id="selectByCondition" resultMap="userResultMap">
        <!--1.因为动态拼接sql的问题，此处需要 1=1这种方式，不影响逻辑-->
        select * from user where 1=1
        <if test="name != null and name != '' ">
            and name = #{name}
        </if>
        <if test="classesId != 0">
            and classes_id = #{classesId}
        </if>;
    </select>

    <insert id="add" useGeneratedKeys="true" keyProperty="id">
        <!--useGeneratedKeys="true" keyProperty="id" 使用数据库自增Id，并回写到数据对象-->
        insert into user(name,age,classes_id) values(#{name}, #{age}, #{classesId});
    </insert>

    <insert id="batchAdd" useGeneratedKeys="true" keyProperty="id">
        <!--        item表示集合中每一个元素进行迭代时的别名，-->
        <!--        index指 定一个名字，用于表示在迭代过程中，每次迭代到的位置，-->
        <!--        open表示该语句以什么开始，-->
        <!--        separator表示在每次进行迭代之间以什么符号作为分隔 符，-->
        <!--        close表示以什么结束。-->
        insert into user(name,age,classes_id) values
        <foreach item="item" collection="list" open="(" separator="," close=")">
            #{item.name}, #{item.age}, #{item.classesId}
        </foreach>

        <!--        如果传入的是单参数且参数类型是一个List的时候，collection属性值为list-->
        <!--        2. 如果传入的是单参数且参数类型是一个Array数组的时候，collection的属性值为array-->
        <!--        3. 如果传入的是Param修饰(@Param("ids") List<String>  ids)的时候，collection的属性值为ids-->
        <!--        4. 如果传入的参数是多个的时候，我们就需要把它们封装成一个Map了，当然单参数也可以-->
    </insert>

    <update id="update">
        update user
        <!--       以下两种方式等价-->
        <!--        <trim prefix="set" suffixOverrides=","><trim/>-->
        <set>
            <if test="name != null and name !=''">
                name=#{name},
            </if>
            <if test="age != 0">
                age=#{age},
            </if>
            <if test="classes_id != 0">
                type=#{type},
            </if>
        </set>
        where id = #{id};
    </update>
    <delete id="deleteById">
        delete from user where id = #{id};
    </delete>
</mapper>
